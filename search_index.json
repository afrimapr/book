[["index.html", "The afrimapr book Welcome", " The afrimapr book The afrimapr team 2021-01-15 Welcome This is the in-progress book introducing map making in R using African data. It is part of the afrimapr project running in 2020-21. We welcome contributions, and will make avenues for contribution clearer soon. In the meantime, do get in touch. "],["preface.html", "Preface", " Preface [defined in index.Rmd] [andy:links to chapters sometimes don’t work for unknown reasons] [https://bookdown.org/yihui/bookdown/cross-references.html] In-progress chapters Intro : aims of this book 1 Step through a simple example of process of mapmaking 2 R recap - help ensure readers know foundations 3 Spatial data types focusing on examples 4 Visualising spatial data part 1 : sf, mapview, tmap 5 Shiny interactive map applications 6 Sources of data, what is open data 7 Join non-spatial data onto spatial 8 Raster manipulation, e.g. summarising data by areas 9 OpenStreetMap data, what they are and how to use 10 Creating and editing spatial data 11 Visualising spatial data part 2, more advanced techniques 12 Case study 1 : health facility locations 13 Case study 2 14 The version of the book you are currently reading was last updated at: Sys.time() ## [1] &quot;2021-01-15 05:15:02 UTC&quot; Continuous integration (built on GitHub) "],["intro.html", "Chapter 1 Introduction 1.1 Spatial data outline", " Chapter 1 Introduction This first chapter is an entry level introduction to spatial data in R using examples from Africa. It is aimed at those with a little knowledge of R. 1.1 Spatial data outline We will start by looking at these spatial data for Africa, shown in the map below. Capital city locations (points) A highway network (lines) Country boundaries (polygons) Population density (gridded or raster data) Cities, highways and boundaries are examples of point, line and polygon data termed vector data. The gridded population density data are termed raster data. In R there is often more than one package that does the same thing. Which one is ‘best’ for you may depend on preference and can change over time. This is true for R spatial operations. In R the sf package deals with vector data (points, lines and polygons), and the raster package deals with raster data. There are other packages too but we don’t need those for now. "],["steps1.html", "Chapter 2 Step through a simple example of process of mapmaking", " Chapter 2 Step through a simple example of process of mapmaking Step through a simple example of process of mapmaking. Demonstrate a simple step by step process of making a map with relatively little explanation. To show the readers what we are aiming for and that this is achievable. Then in later chapters we will work to fill in the gaps in understanding https://speakerdeck.com/minecr/let-them-eat-cake-first "],["rrecap.html", "Chapter 3 R recap 3.1 Setting working directory 3.2 Creating, naming and saving a new R script 3.3 Executing the code 3.4 Install and load packages 3.5 Load data 3.6 Formats of spatial data (content, extensions) 3.7 Objects &amp; dataframes 3.8 Saving dataset 3.9 Saving &amp; exporting maps to the file", " Chapter 3 R recap This section provides a brief recap of the basic steps that are required or useful to do before staring on the project. 3.1 Setting working directory At the beginning of each project it is crucial to determine the working directory for your project. A working directory is a folder where all your files associated with the project will be stored. For example, original datasets, saved datasets as well as plots, graphs or maps created and exported from R. Hence, working directory not only allows you to gather and access the files produced along the work but also load the existing datasets into the RStudio. You can set up the working directory with the openProject function as follows (recommended): rstudioapi::openProject(&quot;path to your directory&quot;) Alternatively, you can use the following command: setwd(&quot;path to your directory&quot;) While the former option will set up and open the working directory for your project, the latter simply determines the default folder for each specific R script. 3.2 Creating, naming and saving a new R script The R script is a plain text file that allows you to save the R code containing both, commands and comments. Saving the R script allows you to reuse your R code and creates a reproducible record of your work. Therefore, it is a good practice to create, name and save it at the very beginning of your project. You can crate a new R script by clicking the New File icon in the top right corner of the RStudio toolbar, which will open a list with different file options. Choose the R Script from the menu and the blank script will open in the main RStudio window. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: New R script can also be opened by Shift+Ctrl+N. You can now save your R script by clicking on the Save icon at the top of the Script Editor, this will prompt a Save File window where you can change the name of your script. Note that the file extension for R scripts is .R. At this point you can also choose a folder where to save your new file. By default, RStudio will try to save your new script in the current working directory. Once the name and file location are chosen, simply click the Save button. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: As you work along your R script document, you can quickly save changes by pressing Ctrl+S. 3.3 Executing the code Now, as you set up the working directory for your project and created your first R script file, we will look into ways of executing (also known as running) the code. You can execute selected chunk of code by clicking Run button at the top right corner of the Script Editor. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: You can also execute the selected code with Ctrl+Enter. If you do not select any code and press Run, RStudio will run the line of code where the cursor is located. The code which has been exectued will appear in the Console, usually located at the bottom part of the window. In RStudio it is also possible to add comments next to your commands simply using a hashtag (#) beforehand. This will stop R from executing this specific part: 3+6 # Using R as a calculator ## [1] 9 # 3+6 3.4 Install and load packages 3.5 Load data There are different approaches that can be used to import your datasets, depending on where the data is located and in what file type it is stored. The easiest case is when the dataset is already part of the R package, as it will be automatically read in when the package is installed and loaded into R. For example, install packages containing dataset: packages_to_install &lt;- c( &quot;rnaturalearth&quot;, &quot;rnaturalearthdata&quot; # data package ) install.packages(packages_to_install) Load them: library(rnaturalearth) library(rnaturalearthdata) To view what datasets are available in a given package: data(package=&quot;rnaturalearthdata&quot;) Create spatial dataset called africa, provided in the package: africa = ne_countries(continent=&quot;africa&quot;, returnclass=&quot;sf&quot;) Please note, the function ne_countries is specific for this package and different packages may use other functions to load the dataset into clobal environment. You can view and explore the dataset: head(africa) ## Simple feature collection with 6 features and 63 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -5.470565 ymin: -26.82854 xmax: 30.75226 ymax: 15.11616 ## CRS: +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## scalerank featurecla labelrank sovereignt sov_a3 adm0_dif ## 1 1 Admin-0 country 3 Angola AGO 0 ## 11 1 Admin-0 country 6 Burundi BDI 0 ## 13 1 Admin-0 country 5 Benin BEN 0 ## 14 1 Admin-0 country 3 Burkina Faso BFA 0 ## 25 1 Admin-0 country 4 Botswana BWA 0 ## 26 1 Admin-0 country 4 Central African Republic CAF 0 ## level type admin adm0_a3 geou_dif ## 1 2 Sovereign country Angola AGO 0 ## 11 2 Sovereign country Burundi BDI 0 ## 13 2 Sovereign country Benin BEN 0 ## 14 2 Sovereign country Burkina Faso BFA 0 ## 25 2 Sovereign country Botswana BWA 0 ## 26 2 Sovereign country Central African Republic CAF 0 ## geounit gu_a3 su_dif subunit su_a3 ## 1 Angola AGO 0 Angola AGO ## 11 Burundi BDI 0 Burundi BDI ## 13 Benin BEN 0 Benin BEN ## 14 Burkina Faso BFA 0 Burkina Faso BFA ## 25 Botswana BWA 0 Botswana BWA ## 26 Central African Republic CAF 0 Central African Republic CAF ## brk_diff name name_long brk_a3 ## 1 0 Angola Angola AGO ## 11 0 Burundi Burundi BDI ## 13 0 Benin Benin BEN ## 14 0 Burkina Faso Burkina Faso BFA ## 25 0 Botswana Botswana BWA ## 26 0 Central African Rep. Central African Republic CAF ## brk_name brk_group abbrev postal formal_en ## 1 Angola &lt;NA&gt; Ang. AO People&#39;s Republic of Angola ## 11 Burundi &lt;NA&gt; Bur. BI Republic of Burundi ## 13 Benin &lt;NA&gt; Benin BJ Republic of Benin ## 14 Burkina Faso &lt;NA&gt; B.F. BF Burkina Faso ## 25 Botswana &lt;NA&gt; Bwa. BW Republic of Botswana ## 26 Central African Rep. &lt;NA&gt; C.A.R. CF Central African Republic ## formal_fr note_adm0 note_brk name_sort name_alt mapcolor7 ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Angola &lt;NA&gt; 3 ## 11 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Burundi &lt;NA&gt; 2 ## 13 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Benin &lt;NA&gt; 1 ## 14 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Burkina Faso &lt;NA&gt; 2 ## 25 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Botswana &lt;NA&gt; 6 ## 26 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; Central African Republic &lt;NA&gt; 5 ## mapcolor8 mapcolor9 mapcolor13 pop_est gdp_md_est pop_year lastcensus ## 1 2 6 1 12799293 110300 NA 1970 ## 11 2 5 8 8988091 3102 NA 2008 ## 13 2 2 12 8791832 12830 NA 2002 ## 14 1 5 11 15746232 17820 NA 2006 ## 25 5 7 3 1990876 27060 NA 2011 ## 26 6 6 9 4511488 3198 NA 2003 ## gdp_year economy income_grp wikipedia fips_10 ## 1 NA 7. Least developed region 3. Upper middle income NA &lt;NA&gt; ## 11 NA 7. Least developed region 5. Low income NA &lt;NA&gt; ## 13 NA 7. Least developed region 5. Low income NA &lt;NA&gt; ## 14 NA 7. Least developed region 5. Low income NA &lt;NA&gt; ## 25 NA 6. Developing region 3. Upper middle income NA &lt;NA&gt; ## 26 NA 7. Least developed region 5. Low income NA &lt;NA&gt; ## iso_a2 iso_a3 iso_n3 un_a3 wb_a2 wb_a3 woe_id adm0_a3_is adm0_a3_us ## 1 AO AGO 024 024 AO AGO NA AGO AGO ## 11 BI BDI 108 108 BI BDI NA BDI BDI ## 13 BJ BEN 204 204 BJ BEN NA BEN BEN ## 14 BF BFA 854 854 BF BFA NA BFA BFA ## 25 BW BWA 072 072 BW BWA NA BWA BWA ## 26 CF CAF 140 140 CF CAF NA CAF CAF ## adm0_a3_un adm0_a3_wb continent region_un subregion region_wb ## 1 NA NA Africa Africa Middle Africa Sub-Saharan Africa ## 11 NA NA Africa Africa Eastern Africa Sub-Saharan Africa ## 13 NA NA Africa Africa Western Africa Sub-Saharan Africa ## 14 NA NA Africa Africa Western Africa Sub-Saharan Africa ## 25 NA NA Africa Africa Southern Africa Sub-Saharan Africa ## 26 NA NA Africa Africa Middle Africa Sub-Saharan Africa ## name_len long_len abbrev_len tiny homepart geometry ## 1 6 6 4 NA 1 MULTIPOLYGON (((16.32653 -5... ## 11 7 7 4 NA 1 MULTIPOLYGON (((29.34 -4.49... ## 13 5 5 5 NA 1 MULTIPOLYGON (((2.691702 6.... ## 14 12 12 4 NA 1 MULTIPOLYGON (((-2.827496 9... ## 25 8 8 4 NA 1 MULTIPOLYGON (((25.64916 -1... ## 26 20 24 6 NA 1 MULTIPOLYGON (((15.27946 7.... 3.6 Formats of spatial data (content, extensions) 3.7 Objects &amp; dataframes 3.8 Saving dataset 3.9 Saving &amp; exporting maps to the file "],["data-types.html", "Chapter 4 Spatial data types focusing on real examples: cities, roads, admin boundaries, surfaces 4.1 Points e.g. cities 4.2 Lines e.g. roads 4.3 Polygons e.g. admin boundaries 4.4 Raster e.g. modelled population estimates", " Chapter 4 Spatial data types focusing on real examples: cities, roads, admin boundaries, surfaces Capital city locations (points) A highway network (lines) Country boundaries (polygons) Population density (gridded or raster data) 4.1 Points e.g. cities 4.2 Lines e.g. roads 4.3 Polygons e.g. admin boundaries 4.4 Raster e.g. modelled population estimates "],["visualising1.html", "Chapter 5 Visualising spatial data part 1: sf, mapview, tmap 5.1 Static maps 5.2 Layers for the static maps 5.3 Interactive maps 5.4 Layers for the interactive maps", " Chapter 5 Visualising spatial data part 1: sf, mapview, tmap In this section we use tmap, sf and mapview packages to visualise spatial data. In particular this section focuses on: Creating static maps Add layers to the maps Creating interactive maps div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Hint: In order to work properly a list requires an empty line beforehand. 5.1 Static maps 5.1.1 Basics (this step can be removed if the basic steps can be put in ch.3 ‘R recap’, since they repeat for all packages) Set up the working directory with the command setwd(\"path to your directory\") or with the openProject function as follows (recommended): rstudioapi::openProject(&quot;path to your directory&quot;) Install required packages cran_packages_to_install &lt;- c( &quot;tmap&quot; # map-making package &quot;tidyverse&quot;, # metapackage containing dplyr, ggplot2 and other packages &quot;sf&quot;, # package for working with spatial data &quot;rnaturalearth&quot;, # data package &quot;rnaturalearthdata&quot; # data package ) install.packages(cran_packages_to_install) Load the packages library(tmap) library(ggplot2) library(sf) library(rnaturalearth) library(rnaturalearthdata) library(dplyr) Create a dataset africa &lt;- ne_countries(continent = &#39;africa&#39;, scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) Create an empty contour map of the continent tm_shape(africa)+ tm_borders() 5.2 Layers for the static maps Fill map using data on last census data and add labels for country names tm_shape(africa)+ tm_fill(col=&quot;lastcensus&quot;, title=&quot;Year of last census&quot;, legend.format = list(format=&quot;s&quot;))+ tm_borders()+ tm_text(&quot;admin&quot;, size = 0.52, fontface=&quot;bold&quot;, auto.placement = TRUE) 5.3 Interactive maps Mapview package allows for an interactive viewing of spatial objects in R. Install mapview package install.packages(&quot;mapview&quot;) Load package library(mapview) Basics #mapview(africa) 5.4 Layers for the interactive maps "],["shiny.html", "Chapter 6 Shiny interactive map applications", " Chapter 6 Shiny interactive map applications Use of shiny package "],["data-sources.html", "Chapter 7 Sources of data", " Chapter 7 Sources of data See also https://rspatialdata.github.io/ R packages, Web APIs, OpenStreetMap intro, HDX 7.0.1 HDX "],["joining.html", "Chapter 8 Join non-spatial data onto spatial", " Chapter 8 Join non-spatial data onto spatial This chapter demonstrated how to join non-spatial data from different sources into spatial "],["raster.html", "Chapter 9 Raster manipulation", " Chapter 9 Raster manipulation e.g. summarising data by areas "],["openstreetmap.html", "Chapter 10 OpenStreetMap data", " Chapter 10 OpenStreetMap data what they are and how to use them? "],["data-editing.html", "Chapter 11 Creating and editing spatial data 11.1 Create a vector file from scratch", " Chapter 11 Creating and editing spatial data How to create and edit spatial data with examples 11.1 Create a vector file from scratch "],["visualising2.html", "Chapter 12 Visualising spatial data part 2", " Chapter 12 Visualising spatial data part 2 More advanced techniques of visualising of spatial data "],["case-study1.html", "Chapter 13 Case study 1 13.1 Health facility locations (probably)", " Chapter 13 Case study 1 13.1 Health facility locations (probably) "],["case-study2.html", "Chapter 14 Case study 2", " Chapter 14 Case study 2 To be decided "],["references.html", "References", " References "]]
