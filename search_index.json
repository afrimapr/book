[["index.html", "The afrimapr book Welcome", " The afrimapr book The afrimapr team 2021-04-08 Welcome This is the in-progress book introducing map making in R using African data. We aim to make a first version available in summer 2021. It is part of the afrimapr project running in 2020-21. The book is aimed principally at analysts who want to make maps from African data as a part of their routine work. We expect that readers will have had some limited experience of R and/or spatial data but this is not strictly required. We will take you step-by-step through code to obtain, manipulate and visualise spatial data. We focus on routine tasks and developing confidence and resilience in applying them, rather than moving to more advanced analyses. For those that are interested in spatial analyses we refer you to the excellent recent book Geocomputation with R. The afrimapr book, in comparison, will cover fewer processes but do so in more detail and assuming less prior knowledge of R and spatial data. We see the two books as being complementary. Those that wish to take their work further after this afrimapr book should find the geocompr book useful. Those that have been through the geocompr book and would like more detail on visualising varied data sources in R should find this afrimapr book useful. The book is compiled from this repository. We welcome contributions, and will make avenues for contribution clearer soon. In the meantime, do get in touch. "],["preface.html", "Preface", " Preface [defined in index.Rmd] [andy:links to chapters sometimes don’t work for unknown reasons] [https://bookdown.org/yihui/bookdown/cross-references.html] In-progress chapters Intro : aims of this book 1 Step through a simple example of process of mapmaking 2 R recap - help ensure readers know foundations 3 Spatial data types focusing on examples 4 Visualising spatial data part 1 : sf, mapview, tmap 5 Shiny interactive map applications 6 Sources of data, what is open data 7 Join non-spatial data onto spatial 8 Raster manipulation, e.g. summarising data by areas 9 OpenStreetMap data, what they are and how to use 10 Creating and editing spatial data 11 Visualising spatial data part 2, more advanced techniques 12 Case study 1 : health facility locations 13 Case study 2 14 The version of the book you are currently reading was last updated at: Sys.time() ## [1] &quot;2021-04-08 14:07:10 UTC&quot; Continuous integration (built on GitHub) "],["intro.html", "Chapter 1 Introduction 1.1 Spatial data outline", " Chapter 1 Introduction This first chapter is an entry level introduction to spatial data in R using examples from Africa. It is aimed at those with a little knowledge of R. 1.1 Spatial data outline We will start by looking at these spatial data for Africa, shown in the map below. Capital city locations (points) A highway network (lines) Country boundaries (polygons) Population density (gridded or raster data) Cities, highways and boundaries are examples of point, line and polygon data termed vector data. The gridded population density data are termed raster data. In R there is often more than one package that does the same thing. Which one is ‘best’ for you may depend on preference and can change over time. This is true for R spatial operations. In R the sf package deals with vector data (points, lines and polygons), and the raster package deals with raster data. There are other packages too but we don’t need those for now. "],["steps1.html", "Chapter 2 Step through a simple example of process of mapmaking", " Chapter 2 Step through a simple example of process of mapmaking Step through a simple example of process of map-making. Demonstrate a simple step by step process of making a map with relatively little explanation. To show the readers what we are aiming for and that this is achievable. Then in later chapters we will work to fill in the gaps in understanding https://speakerdeck.com/minecr/let-them-eat-cake-first "],["rrecap.html", "Chapter 3 R recap 3.1 Setting working directory 3.2 Creating, naming and saving a new R script 3.3 Executing the code 3.4 Install and load packages 3.5 Load data 3.6 Basic data types 3.7 Basic objects and data structures 3.8 Getting help with R Help 3.9 Further resources 3.10 Wrap up 3.11 Exercise solutions", " Chapter 3 R recap Previous section demonstrated what can be achieved with the learning materials provided in this book and gave an example of capabilities of packages that are used. This section presents basic steps that are required (or simply a good practice) before starting the project. It provides a brief recap of R fundamentals such as data types and structures, objects and commands. It aims at building a starting point for those who are new to R and provide a basic background knowledge that the reader can build on, while progressing through the further chapters of this book. It will be particularly useful for beginners, who have minimal knowledge of R. Therefore, more advanced readers can move forward to the next chapter where spatial data types are looked into. div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} Learning objectives create a working directory for his/her project create, name and save a new R script execute R code install and load an R package import data set into R space identify and characterise different data types classify and contrast various data structures accessing and using Help within R List of episodes Working directory New script Executing code Install packages Load data Basic data types Basic objects Getting help 3.1 Setting working directory At the beginning of each project it is crucial to determine the working directory for your project. A working directory is a folder where all your files associated with the project will be stored. For example, original data sets, saved data sets as well as plots, graphs or maps created and exported from R. Hence, working directory not only allows you to gather and access the files produced along the work but also load the existing data sets into the RStudio. You can set up the working directory with the openProject function as follows (recommended): rstudioapi::openProject(&quot;path to your directory&quot;) Alternatively, you can use the following command: setwd(&quot;path to your directory&quot;) While the former option will set up and open the working directory for your project, the latter simply determines the default folder for each specific R script. 3.2 Creating, naming and saving a new R script The R script is a plain text file that allows you to save the R code containing both, commands and comments. Saving the R script allows you to reuse your R code and creates a reproducible record of your work. Therefore, it is a good practice to create, name and save it at the very beginning of your project. You can crate a new R script by clicking the New File icon in the top right corner of the RStudio toolbar, which will open a list with different file options. Choose the R Script from the menu and the blank script will open in the main RStudio window. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: New R script can also be opened by Shift+Ctrl+N. You can now save your R script by clicking on the Save icon at the top of the Script Editor, this will prompt a Save File window where you can change the name of your script. Note that the file extension for R scripts is .R. At this point you can also choose a folder where to save your new file. By default, RStudio will try to save your new script in the current working directory. Once the name and file location are chosen, simply click the Save button. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: As you work along your R script document, you can quickly save changes by pressing Ctrl+S. 3.3 Executing the code Now, as you set up the working directory for your project and created your first R script file, we will look into ways of executing (also known as running) the code. You can execute selected chunk of code by clicking Run button at the top right corner of the Script Editor. div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: You can also execute the selected code with Ctrl+Enter. If you do not select any code and press Run, RStudio will run the line of code where the cursor is located. The code which has been exectued will appear in the Console, usually located at the bottom part of the window. In RStudio it is also possible to add comments next to your commands simply using a hashtag (#) beforehand. This will stop R from executing this specific part: 3+6 # Using R as a calculator ## [1] 9 # 3+6 3.4 Install and load packages Before being able to use a specific package in R, it is necessary to firstly install and then load it. In this example we install package remotes using install.packages(): install.packages(&quot;remotes&quot;) Further, we have to load it into R using library() function: library(remotes) div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note the presence of the quotation mark \" \" in case of the first function and its lack in case of the second function. To download and install packages directly from remote repositories such as GitHub, we can use previously loaded remote package and load them as usual: remotes::install_github(&quot;afrimapr/afrilearndata&quot;) library(afrilearndata) In the example, above we use double-colon operator :: to call function install_github from name spaceremotes. Only functions which are included in the packages can be retrieved in this manner. 3.5 Load data There are different approaches that can be used to import your data sets, depending on where the data is located and in what file type it is stored. The easiest case is when the data set is already part of the R package, as it will be automatically read in when the package is installed and loaded into R. For example, install packages containing data set: remotes::install_github(&quot;afrimapr/afrilearndata&quot;) Load them: library(afrilearndata) To view what data sets are available in a given package: data(package=&quot;afrilearndata&quot;) We can view and explore the africapitals data set using: head(africapitals) ## capitalname countryname pop iso3c geometry ## 280 Abuja Nigeria 178462 NGA 7.17, 9.18 ## 308 Accra Ghana 2029143 GHA -0.20, 5.56 ## 382 Addis Abeba Ethiopia 2823167 ETH 38.74, 9.03 ## 996 Algiers Algeria 2029936 DZA 3.04, 36.77 ## 1584 Antananarivo Madagascar 1463754 MDG 47.51, -18.89 ## 2193 Asmara Eritrea 578860 ERI 38.94, 15.33 We can also create a dataframe from africapitals in the global environment: dataset &lt;- africapitals 3.6 Basic data types In this section we explore a basic set of possible object types that you can encounter in a dataframe. The division presented below is based on the types of values that data (object) stores. The most popular data types are: Numeric Character Logical (so-called Boolean) Factor In R the type of object is referred to as class of an object and this function can be used to learn what data types the object contains. x &lt;- 11 #we create a vector that stores value 11 class(x) ## [1] &quot;numeric&quot; It is useful because each class has different properties and can be used in a different way. For example, intuitively we can perform the mathematical operations on numeric objects such that: x &lt;- 11 y &lt;- 52 x*y # multiplication ## [1] 572 div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Hint: To assign a value to an object two operators can be used interchangeably: &lt;- or =. 3.6.1 Numeric and integer Numeric data stores real numbers. This means that the object x from above is in fact 11.000000, where the zeros are not printed, by default. It is also possible to store value as whole number in a class object called integer. An integer can be created from a numeric object in the following way: x &lt;- 13.5 z &lt;- as.integer(x) class(z) ## [1] &quot;integer&quot; Please note, even though the numeric value is a decimal number the integer by default rounds downwards, hence both 13.1 and 13.9 will result in integer equal 13. 3.6.2 Characters Character objects store text, usually referred to as a string. String can be a letter, word or even a sentence. x &lt;- &quot;adult&quot; y &lt;- &quot;A&quot; y &lt;- &quot;I have a bicycle.&quot; Interestingly, a character can also contain a number, however it will be stored as a text and will not have the same properties as a numeric or integer object. As a results, it will not be possible to perform calculation on character objects, even if they contain numbers. This is when class function becomes helpful. x &lt;- &quot;5&quot; y &lt;- 7 class(x) ## [1] &quot;character&quot; class(y) ## [1] &quot;numeric&quot; It is also possible to convert character variables into numeric: x &lt;- &quot;5&quot; z &lt;- as.numeric(x) class(z) ## [1] &quot;numeric&quot; 3.6.3 Logical Logical objects can take values TRUE or FALSE, where TRUE is an equivalent of 1 whereas FALSE is an equivalent of 0. In these sense, they can be thought of as numerical values. x &lt;- TRUE y &lt;- 3 + TRUE print(y) ## [1] 4 Typically, logical objects are results of a condition. For example, if we want to test if object a is larger than 100. a &lt;- 76 #create object a a &gt; 100 # condition 1 ## [1] FALSE a &lt; 80 # condition 2 ## [1] TRUE 3.6.4 Factors Factors are categorical variables with associated levels. They can store both, numbers: a &lt;- rep(1:3, times=3) # create a vector of numbers from 1 to 3, repeated 3 times a &lt;- as.factor(a) a ## [1] 1 2 3 1 2 3 1 2 3 ## Levels: 1 2 3 and strings: b &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;C&quot;, &quot;C&quot;) b &lt;- as.factor(b) b ## [1] A B B C D C C ## Levels: A B C D The numbers and strings, in the example above, serve as labels of different levels. 3.6.5 Exercises div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 3.6.1: Create a vector ‘a’ that contains descending sequence of numbers from 50 to 30 that decrases by 2. Hint: use seq() 3.7 Basic objects and data structures In this section we explain the basic data structures that we often work with in R. These include a vector, list, matrix and a data frame. 3.7.1 Vector Vector is a one dimensional structure which contains elements of the same type. Usually a combine function is used to create a vector such that: a &lt;- c(1:10) It is also possible to create a vector with text-based objects, for example with capitals from our afrilearndata: capitals &lt;- africapitals$capitalname We can print content of our vector to see what it contains: print(capitals) ## [1] &quot;Abuja&quot; &quot;Accra&quot; &quot;Addis Abeba&quot; &quot;Algiers&quot; &quot;Antananarivo&quot; ## [6] &quot;Asmara&quot; &quot;Bamako&quot; &quot;Bangui&quot; &quot;Banjul&quot; &quot;Bissau&quot; ## [11] &quot;Brazzaville&quot; &quot;Bujumbura&quot; &quot;Cairo&quot; &quot;Conakry&quot; &quot;Dakar&quot; ## [16] &quot;Dodoma&quot; &quot;Freetown&quot; &quot;Gaborone&quot; &quot;Harare&quot; &quot;Jibuti&quot; ## [21] &quot;Kampala&quot; &quot;Khartoum&quot; &quot;Kigali&quot; &quot;Kinshasa&quot; &quot;Libreville&quot; ## [26] &quot;Lilongwe&quot; &quot;Lome&quot; &quot;Luanda&quot; &quot;Lusaka&quot; &quot;Malabo&quot; ## [31] &quot;Maputo&quot; &quot;Maseru&quot; &quot;Mbabane&quot; &quot;Mogadishu&quot; &quot;Monrovia&quot; ## [36] &quot;N&#39;Djamena&quot; &quot;Nairobi&quot; &quot;Niamey&quot; &quot;Nouakchott&quot; &quot;Ouagadougou&quot; ## [41] &quot;Porto Novo&quot; &quot;Pretoria&quot; &quot;Rabat&quot; &quot;Tripoli&quot; &quot;Tunis&quot; ## [46] &quot;Windhoek&quot; &quot;Yamoussoukro&quot; &quot;Yaounde&quot; &quot;al-&#39;Ayun&quot; &quot;Juba&quot; Another important feature is to see what types of objects the vector stores. We can see that our text-based objects are characters using typeof function: typeof(capitals) ## [1] &quot;character&quot; 3.7.2 Matrix Matrix can be though of as an upgraded version of a vector, where vector is an one-dimensional array and two-dimensional array. We can create a matrix that has three columns and five rows with the following: matrix(1:15, ncol=3, nrow=5, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 ## [5,] 13 14 15 By default, the elements in the matrix will be arranged by column, so byrow=TRUE segregates the elements in the matrix row-wise. We can also exploit the fact that matrix is an upgraded vector by binding them column- or row-wise, as long as they have the same length: vector1 &lt;- c(&quot;water&quot;, &quot;milk&quot;, &quot;juice&quot;) vector2 &lt;- (1:3) cbind(vector1, vector2) #for row-wise binding we would use rbind() ## vector1 vector2 ## [1,] &quot;water&quot; &quot;1&quot; ## [2,] &quot;milk&quot; &quot;2&quot; ## [3,] &quot;juice&quot; &quot;3&quot; 3.7.3 Data frame Data frame is a two dimensional array, similar to a matrix. However, it can contain different data types, unlike matrix. Beyond, columns as well as rows within the data frame are named. In a data frame a column is a variable and row is an observation. You can create a simple data frame with two columns and three rows, using vectors above, with data.frame function: data.frame(vector1, vector2) ## vector1 vector2 ## 1 water 1 ## 2 milk 2 ## 3 juice 3 If you compare the output of the example above where we used the cbind function to create a matrix, to the result of the data.frame function, we can clearly see the difference between a matrix and a data frame. Where matrix is homogeneous and data frame is heterogeneous in terms of data type. All the values in the matrix are characters while the first column in data frame contains factors and the second one integers. To address a specific column in a data frame we can use $ such that: df_1 = data.frame(vector1, vector2) #create data frame called df_1 df_1$vector1 #view column called vector1 ## [1] &quot;water&quot; &quot;milk&quot; &quot;juice&quot; At the moment columns in the df_1 adapted names of the vectors: colnames(df_1) ## [1] &quot;vector1&quot; &quot;vector2&quot; We can change the column headers by their names or their index such that: names(df_1)[names(df_1) == &quot;vector1&quot;] &lt;- &quot;drinks&quot; names(df_1)[2] &lt;- &quot;amount&quot; colnames(df_1) ## [1] &quot;drinks&quot; &quot;amount&quot; 3.7.4 Exercises div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 3.7.1: Create three vectors containing character, integer and logical values, respectively. Each with 10 rows. Bind them to generate a matrix with 3 columns and 10 rows. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 3.7.2: Create a data frame from the matrix created in the previous exercise. Rename column headers to describe their content. 3.8 Getting help with R Help R is a powerful software with many different packages and functions which are continuously developed and added. Therefore, it is difficult, if not impossible, to be familiar with all the functions that are currently available. Hence, in order to learn more about them, R provides extensive documentation which can be accessed with help() function, ? operator or by clicking in Help panel in the bottom-right corner. For example: help(matrix) #to find out what matrix is help(package=&quot;remotes&quot;) #to get help with remotes package Alternatively, it is possible to use ? in front of the searched item and the R documentation will appear in right-bottom pane. For example, to read more on how to use help function itself we can use: ?help Importantly, in order to get help regarding objects with unusual names such as the logical operators, it is necessary to use quotation marks: ?&quot;&amp;&quot; help(&quot;!&quot;) R documentation for functions frequently offers a working example which can be accessed with: example(vector) #to see an example of a vector ## ## vector&gt; df &lt;- data.frame(x = 1:3, y = 5:7) ## ## vector&gt; ## Error: ## vector&gt; try(as.vector(data.frame(x = 1:3, y = 5:7), mode = &quot;numeric&quot;)) ## Error in as.vector(data.frame(x = 1:3, y = 5:7), mode = &quot;numeric&quot;) : ## &#39;list&#39; object cannot be coerced to type &#39;double&#39; ## ## vector&gt; x &lt;- c(a = 1, b = 2) ## ## vector&gt; is.vector(x) ## [1] TRUE ## ## vector&gt; as.vector(x) ## [1] 1 2 ## ## vector&gt; all.equal(x, as.vector(x)) ## FALSE ## [1] &quot;names for target but not for current&quot; ## ## vector&gt; ###-- All the following are TRUE: ## vector&gt; is.list(df) ## [1] TRUE ## ## vector&gt; ! is.vector(df) ## [1] TRUE ## ## vector&gt; ! is.vector(df, mode = &quot;list&quot;) ## [1] TRUE ## ## vector&gt; is.vector(list(), mode = &quot;list&quot;) ## [1] TRUE 3.9 Further resources Finally, the Internet also provides several reliable sources such as official R website or documentation pages where you can find help. 3.10 Wrap up In this chapter we learned several R commands which prepared the reader for starting with his/her own project. Moreover, we familiarised with a number of data types and R objects. Moreover, we looked at how to obtain help and access R documentation. The material covered in this section aimed at building a base for the reader to allow him/her successfully progress through the book. 3.11 Exercise solutions Exercise 3.6.1 a &lt;- seq(50,30, by = -2) Exercise 3.7.1 v1 &lt;- c(&quot;water&quot;, &quot;milk&quot;, &quot;juice&quot;, &quot;coffee&quot;, &quot;tea&quot;, &quot;tea&quot;, &quot;juice&quot;, &quot;milk&quot;, &quot;water&quot;, &quot;soda&quot;) v2 &lt;- seq(1,10) v3 &lt;- rep(c(TRUE,FALSE), length.out = 10) v3 &lt;-as.logical(v3) m1 = cbind(v1, v2, v3) m1 ## v1 v2 v3 ## [1,] &quot;water&quot; &quot;1&quot; &quot;TRUE&quot; ## [2,] &quot;milk&quot; &quot;2&quot; &quot;FALSE&quot; ## [3,] &quot;juice&quot; &quot;3&quot; &quot;TRUE&quot; ## [4,] &quot;coffee&quot; &quot;4&quot; &quot;FALSE&quot; ## [5,] &quot;tea&quot; &quot;5&quot; &quot;TRUE&quot; ## [6,] &quot;tea&quot; &quot;6&quot; &quot;FALSE&quot; ## [7,] &quot;juice&quot; &quot;7&quot; &quot;TRUE&quot; ## [8,] &quot;milk&quot; &quot;8&quot; &quot;FALSE&quot; ## [9,] &quot;water&quot; &quot;9&quot; &quot;TRUE&quot; ## [10,] &quot;soda&quot; &quot;10&quot; &quot;FALSE&quot; Exercise 3.7.2 df = data.frame(m1) names(df)[1] &lt;- &quot;Drink&quot; names(df)[2] &lt;- &quot;Amount&quot; names(df)[3] &lt;- &quot;Female&quot; df$Female &lt;-as.logical(df$Female) df$Amount &lt;-as.integer(df$Amount) df ## Drink Amount Female ## 1 water 1 TRUE ## 2 milk 2 FALSE ## 3 juice 3 TRUE ## 4 coffee 4 FALSE ## 5 tea 5 TRUE ## 6 tea 6 FALSE ## 7 juice 7 TRUE ## 8 milk 8 FALSE ## 9 water 9 TRUE ## 10 soda 10 FALSE "],["data-types.html", "Chapter 4 Spatial data types with focus on real examples 4.1 Overall goal of the chapter 4.2 Points 4.3 Lines 4.4 Polygons 4.5 Rasters 4.6 Summary/key points 4.7 Further resources 4.8 Feedback", " Chapter 4 Spatial data types with focus on real examples 4.1 Overall goal of the chapter Previous chapter provided a short recap of the R basics that are necessary to succesfully go through the geospatial training that has been drawn up in this book. This section will focus on the very basics of geospatial mapping, the four different types of spatial data: points lines polygons rasters The goal of a spatial map is to model reality, whether this is on the scale of a street, a neighbourhood, a country or a continent. Depending on the topics you’re interested in, this could be focussed on disease cases, landcover dynamics, location of schools and so on. The opportunities are endless. All the R software needs is information in points, lines, polygons and rasters which together form a model of reality. –&gt; interactive image with a different layer for points, lines, polygons and rasters (need help doing this) #mapview(list(africapitals, afrihighway), # zcol = list(&#39;pop&#39;,&#39;Name&#39;), # legend = list(TRUE, FALSE), # color = list(NULL, &#39;red&#39;), # label = list(paste(africapitals$countryname,&#39;:&#39;,africapitals$capitalname), # afrihighway$Name) ) All spatial data types require a spatial reference framework or coordinate system identification to place data in the correct location in space. We will discuss this in more detail in chapter xxx. For now, just be aware that apart from your data file, additional data are necessary to place your spatial data in the correct location. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note that spatial data types can be stored in many different formats, from Shapefile (.shp + .dbf + .prj + …), to GeoPackage (.gpkg), to CSV files (.csv). This can be overwhelming at times. Never hesitate to contact the owner of the data or search the internet to find out more about your spatial database! This chapter is written for beginners, who have basic knowledge of R and no experience with spatial data. If you are familiar with these basic data types, you can move on to the next chapter where visualisation of data types are explained in more detail. div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} 4.1 Learning objectives Describe the difference between points, lines, polygons and raster data types Identify data files from the four different spatial data types Open data files from the four different spatial data types in R Visualise data files from the four different spatial data types in R 4.1.1 List of episodes Points (cities) Lines (roads) Polygons (country boundaries) Rasters (population density) 4.2 Points div.green { background-color:palegreen; border-radius: 5px; padding: 20px;} 4.2 Learning objectives Identify point data files Open point data files Visualise point data files Let’s take an imaginary walk outside. What do you see? Houses, cars, trees… All these objects have unique coordinates that can be used to identify their exact location. On a map, the objects can be drawn as points with their latitude and longitude coordinate indicating their exact location in relation to other objects and places. Depending on the scale of your map, points can represent anything from a house, health clinic, city or district. You, as the map creator, can decide the scale of your own map. 4.2.1 Example Lets try and visualise the capital cities of Africa. Just a quick reminder of the necessary packages # library(afrilearndata) #load afrilearndata package # # #In case the data isn&#39;t loaded into your R environment automatically, they can be individually loaded using the codes below. # data(africapitals) #location of the African capitals # data(afriairports) #location of the large airports in Africa # data(afrihighway) #the main highways in Africa # data(africountries) #borders of the African countries # data(afripop2000) #The population density accross Africa (Worldpop) We will start by downloading the necessary packages: sf package. This package is necessary to read in the spatial data files. tmap package. This package is necessary to create the maps. # #install.packages(&quot;sf&quot;) #install sf package # #install.packages(&quot;tmap&quot;) #install tmap package # library(sf) #load sf package # library(tmap) #load tmap package div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note that more information can be found about the different packages using the Help tools explained in chapter 3.8 Now, let’s look at the data file that contains information about the African capitals. A quick summary of the spatial aspects (geometry) of the datafile can be checked using the following code: #print(st_geometry(africapitals)) #printing information on the geometry We can see from the results that the African capital data file contains 50 points (capitals) with geometry type POINT. Let’s print the first 6 rows of data, so we can see how the coordinates of each African captial is stored in the database. #head(africapitals) #First 6 rows of data are printed The capitals all have one latitude and one longitude value. The geometry of the point data is stored as POINT (Latitude, Longitude). On the location where the latitude and longitude overlap, a point will be drawn when POINT data is visualised. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note that this database also includes the population of the capital as a seperate data column. Let’s now visualise the African capitals by plotting their geometry using the tmap package. # tm_shape(africapitals) + #specify the data file # tm_dots() # displaying the point geometry The tmap package works similar to the ggplot package. You need to first specify the data file you want to visualise using tm_shape(), after which the exact format of the spatial data can be specified (points, lines, polygons). As we are working with point data in this example, the tm_dots() function is used. As with ggplot, there is a lot of flexibility in the colouring, shapes and sizes of the dots. For example, the dots can be turned red and labelled with the name of the city. # tm_shape(africapitals) + # tm_dots(&quot;red&quot;)+ # displaying the point geometry as red dots # tm_text(&quot;capitalname&quot;, size=0.7 ) #adding the name As you can see in the example above, the labelling makes the image messy. In these instances it is important to think about the message you are trying to convey with your map. If the labelling is essential, you can look up the help section of the ‘tm_text’ using the help tool and play around with the different options to clean up the map further. 4.2.1.1 Exercise 1 In this first exercise, we will use the same African capital data as our example. Below, We have visualised all capitals with &gt; 1.400.000 people using green squares of size 1. However, the code isn’t working. Can you find the four mistakes? Hint: if you get stuck, look at ‘?tm_dots’ #africapitals_filtered=africapitals %&gt;% # dplyr::filter((africapitals$iso3c) &gt; 1.400.000) #tm_shape(africapitals_filtered) + # tm_dots(&quot;green&quot;, size=0.5) Answer: * In the initial filter, africapitals$iso3c needs to be changed to africapitals$pop * Dots in 1.400.000 need to be removed * The shape of the dots need to be specified as squares using shape=22 * The size of the points needs to be 1. #africapitals_filtered=africapitals %&gt;% # dplyr::filter((africapitals$pop) &gt; 1400000) #tm_shape(africapitals_filtered) + # tm_dots(&quot;green&quot;, shape = 22, size=1) 4.2.1.2 Exercise 2 We will now use capital and African airport data. Visualise the capitals and airports in one map, with capitals as grey large filled-in circles and airports as smaller blue not-filled triangles. Hint: if you get stuck, look at ‘Add Points to a Plot’ in the help section. Hint: When both points and lines are mapped, datasets need to be identified seperately in tm_shape() before the use of tm_dots(). Answer: #tm_shape(africapitals) + # tm_dots(col=&quot;grey&quot;, shape = 19, size=3) + #tm_shape(afriairports) + # tm_dots(col=&quot;blue&quot;, shape = 2, size=1) 4.3 Lines div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} 4.3 Learning objectives Identify line data files Open line data files Visualise line data files In previous episode we looked at point data, such as capitals and airports. We are often interested in how these different locations on a map are connect to eachother. These connections are visualised using lines. Roads, rivers and flight pathes are just a few of the many ways that lines are used. Lines are one dimensional data which are drawn using points (and thus point data) connected to eachother in a set order. Depending on the detail of the lines, more or less point data are connected. 4.3.1 Example For this example, we will look at the trans-African highway network. Let’s start by looking at a quick summary of the spatial aspects (geometry). #print(st_geometry(afrihighway)) #printing information on the geometry The results show that the African highway network contains 100 lines with geometry type LINESTRING. Let’s now print the first 6 rows of data to see how line data are stored. #head(afrihighway) #First 6 rows of data are printed Line data contain a string of data points with latitude and longitude: LINESTRING(Latitude1, Longitude1, Latitude2, Longitude2, Latitude3, Longitude3,.. ). During mapping, these points are connected to form a line. Let’s visualise these linestrings in red by plotting their geometry using the tmap package. #tm_shape(afrihighway) + # tm_lines(&quot;red&quot;) div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Similar to point data, the lines can be illustrated in a large variety of ways. Please check the tm_lines() help section to familiarise yourself with the many layout options available. Now we add the capitals from previous episode in blue. # tm_shape(africapitals) + # tm_dots(&quot;blue&quot;, size=0.5)+ # tm_shape(afrihighway) + # tm_lines(&quot;red&quot;) # displaying the point geometry as red dots Great to see how the capitals are connected by the trans-African highway network. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note that the order of tm_dots() and tm_lines() matters. If you want the points overlaying the lines, it should be placed after the lines coding and visa versa. 4.3.1.1 Exercise 1 In the below exercise we have tried to visualise all the capitals and only the roads starting with the letter ‘b’. However, we have messed up the order of the code. Can you rearrange the code? # tm_shape(africapitals) + # tm_shape(afrihighway_ex1)+ # tm_dots(&quot;blue&quot;, size=0.5)+ # tm_lines(&quot;blue&quot;) #afrihighway_ex1=afrihighway[grep(&quot;^B&quot;, afrihighway$Name),] Answer: #afrihighway_ex1=afrihighway[grep(&quot;^B&quot;, afrihighway$Name),] # tm_shape(africapitals) + #important that capitals are visualised first # tm_dots(&quot;blue&quot;, size=0.5)+ # tm_shape(afrihighway_ex1)+ # tm_lines(&quot;blue&quot;) 4.3.1.2 Exercise 2 Visualise the trans-African highway network, with line width associated with the length of the road. The function st_length is used to calculate the length of a line. Answer: #afrihighway$length=tapply(st_length(afrihighway), afrihighway$Name, sum) #tm_shape(afrihighway) + # tm_lines(lwd = `length`) 4.4 Polygons div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} 4.4 Learning objectives Identify polygon data files Open polygon data files Visualise polygon data files Polygons are lines with the same first and last coordinate. When the polygon line is connected, the same start and end point results in a closed shape. Similar to lines, depending on the detail of the map, more or less points can be used to create a polygon. This two-dimensional data is most often used to visualise country and continent boundaries. For example the continent outline of Africa is a multipolygon. #plot(st_geometry(africontinent), col = &quot;lightblue&quot;) One polygon is used to visualise mainland of Africa. An additional polygon is used for Madagascar. Together they represent the whole African continent. Sometimes several polygons are necessary to capture a more complex shape. The different polygons in one data row indicate either areas to include or exclude from the final image. These are called multipolygons. An example of a multipolygon is the country border of South Africa. Lesotho is entirely surrounded by South Africa. If we want to visualise South Africa, we need to make sure that the Lesotho area is excluded. Visualisation of South Africa therefore requires two polygons, one to outline the outer borders and one to highlight the area to exclude (Lesotho country borders). Below, the South African border is visualised. #africountries_ex=africountries %&gt;% # filter(`name` == &quot;South Africa&quot;) #plot(st_geometry(africountries_ex), col = &quot;lightblue&quot;) As you can see in the image, when the polygon of South Africa is visualised, a white area is visible inside the country (representing Lesotho), which is not part of South Africa. 4.4.1 Example For this example, we will look at the country borders of African countries. Let’s visualise the geometry of the datafile first. #print(st_geometry(africountries)) #printing information on the geometry The country border file contains 51 country outlines with geometry type MULTIPOLYGON. If we print the first 6 rows of data, we can see how each country border is stored in the database. #head(africountries) #First 6 rows of data are printed Here, the geometry data contain a list with (multiple) polygons, with each polygon represented as a list of data points with latitude and longitude. These points are connected to form polygons, which are either used to include or exclude areas from the final image. The geometry of the multipolygon data is stored as MULTIPOLYGON (((Latitude1, Longitude1, Latitude2, Longitude2, Latitude3, Longitude3,.. ),(Latitude1, Longitude1, ..)),(Latitude1, Longitude1, …))). Lets visualise these multipolygons with black lines. # tm_shape(africountries) + # tm_borders() #if only borders need to be visualised # # tm_shape(africountries) + # tm_polygons() #if you want the image to specify the multipologon area Now we can add the capitals and highways from previous episodes # tm_shape(africountries) + # tm_borders()+ # tm_shape(africapitals) + # tm_dots(&quot;blue&quot;, size=0.5)+ # tm_shape(afrihighway) + # tm_lines(&quot;red&quot;) # displaying the point geometry as red dots 4.4.1.1 Exercise 1 Multiple choice to identify if datafiles contain point, line or (multi)polygon geometry. 1.1 Look up the bus routes in your home area. Which data type would you use to visualise this data? a Point data b Line data c Multipolygon data d All of the above answer: b 1.2 What kind of data type is necessary to visualise the countries part of the the Economic Community of West African States (ECWAS) community? a Point data b Line data c Multipolygon data d All of the above answer: c 1.3 Which data type is necessary for the authors to visualise the below image. (need help visualising this with the right approval from authors) https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fcdiac.ess-dive.lbl.gov%2Fepubs%2Fndp%2Fndp055%2Fndp055.html&amp;psig=AOvVaw2qJ0HAjtU9ytbSWT-qFR0R&amp;ust=1616679119758000&amp;source=images&amp;cd=vfe&amp;ved=0CAIQjRxqFwoTCKD8l5qFye8CFQAAAAAdAAAAABBW a Point data b Line data c Multipolygon data d All of the above answer: d 4.4.1.2 Exercise 2 Visualise the African borders of all countries with an area larger than 300.000 km^2. The function st_area is used to calculate the area within a polygon. Hint: make sure you check the units Answer: #africountries$area_sqm &lt;- st_area(africountries) #africountries$area_sqkm &lt;-africountries$area_sqm / 1000000 #africountries_filtered = africountries %&gt;% # dplyr::filter(as.numeric(africountries$area_sqkm) &gt; 300000) #tm_shape(africountries_filtered) + # tm_borders()+ 4.5 Rasters Points, lines and polygons, in their essence, consist of points with a longitude and latitude value. The data files of these vectors look very similar. Raster data are a group on their own. Raster data consist of a matrix of grid cells (pixels), with each grid cell representing a geographical location with a value illustrating a characteristic of that location. Raster data are mainly used when displaying data that are continuous accross space. For example, population density, landcover variation and elevation data extracted from satellites, drones and surveys. The more grid cells a raster file contains, the smoother the visualisation of the characteristic will be. However, a large number of grids also means a large heavy file, which may be difficult to run. Whenever you are working with raster files, think about your goal and objective. The highest resolution might not always be necessary. div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} 4.5 Learning objectives Explain the difference between vector and raster data Identify raster data files Open raster data files Visualise raster data files To read in raster data, we first need to install and load the ‘raster’ package. #install.packages(&quot;raster&quot;) #install sf package #library(raster) # load raster package We can now start visualising raster data. 4.5.1 Example For this example we use African population data from 2000 and 2020. Let’s look at the information within the file first. #print(afripop2000) #printing information on the raster data file The population raster data from 2000 contains 434 rows, 413 columns and a total of 179.242 grid cells with geometry type RasterLayer . Let’s print the first 10 rows of data. #head(afripop2000) #First 6 rows of data are printed Why do you think all rows are empty? Let’s take a look at more grid cells. #getValues(afripop2000) The printed matrix shows that the raster layer consists of a matrix with values. The grid cells can be empty if no data is available. This just results in no visualisation at those locations. Lets visualise the population data with the country borders. div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Please note that population density data are highly skewed. To ensure both high and low density areas are clearly visible, we have to specify the data breaks manually. #tm_shape(afripop2020) + # tm_raster(breaks=c(0,2,20,200,2000,25000)) We can make the image easier to interpret by using a palette from the viridisLite package, moving the legend using tm_layout() and including the African borders. #tm_shape(afripop2020) + # tm_raster(palette = rev(viridisLite::magma(5)), breaks=c(0,2,20,200,2000,25000)) + # tm_layout(legend.position = c(&quot;left&quot;,&quot;bottom&quot;))+ #tm_shape(africountries) + # tm_borders() Now we can add the capitals and highways from previous episodes. #tm_shape(afripop2000) + # tm_raster(palette = rev(viridisLite::magma(5)), breaks=c(0,2,20,200,2000,25000)) + # tm_layout(legend.position = c(&quot;left&quot;,&quot;bottom&quot;))+ #tm_shape(africountries) + # tm_borders() 4.5.1.1 Exercise 1 Visualise the population data of 2000 using a different palette from the viridisLite package. Increase the number of breaks to six. Which breaks are most appropriate? #tm_shape(afripop2020) + # tm_raster(palette = rev(viridisLite::plasma(6)), breaks=c(0,2,20,200,2000,20000, 25000)) + # tm_layout(legend.position = c(&quot;left&quot;,&quot;bottom&quot;))+ #tm_shape(africountries) + # tm_borders() 4.6 Summary/key points Summary image (to be created) 4.7 Further resources If you are interested in learning more about the different spatial data types, please visit: Geospatial workshop Geospatial data organization Introduction to geospatial data Raster and vector data 4.8 Feedback Request on what was useful to the reader (learner) and what can be improved: Is this necessary after each chapter? Feels slightly repetitive. "],["visualising1.html", "Chapter 5 Visualising spatial data part 1: tmap and mapview 5.1 Overall goal of the chapter 5.2 Quick interactive maps with mapview 5.3 Static maps with tmap 5.4 Interactive maps with tmap 5.5 Further resources 5.6 Exercise solutions", " Chapter 5 Visualising spatial data part 1: tmap and mapview 5.1 Overall goal of the chapter In the previous section we explored different types of spatial data and looked at how these can be used to create a map. In this section we will use tmap and mapview packages to crate both static and interactive maps. In particular, we will focus on the goals presented below. div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} Learning objectives Create static and interactive maps using different packages Learn function structure to build more advanced maps Analyse the differences between used packages and identify their applicability for various purposes This chapter requires the following packages (some of them we used already): cran_packages_to_install &lt;- c( &quot;mapview&quot;, # map-making package for interactive maps &quot;tmap&quot;, # map-making package for static and interactive maps &quot;tidyverse&quot;, # metapackage containing dplyr, ggplot2 and other packages &quot;sf&quot;, # package for working with spatial data &quot;rnaturalearth&quot;, # data package &quot;rnaturalearthdata&quot;, # data package &quot;tmaptools&quot; # map building package ) install.packages(cran_packages_to_install) remotes::install_github(&quot;afrimapr/afrilearnr&quot;) #remotes::install_github(&quot;afrimapr/afrilearndata&quot;) Next, we need to load the packages: library(tmap) library(mapview) library(ggplot2) library(sf) library(afrilearndata) library(rnaturalearth) library(rnaturalearthdata) library(dplyr) library(tmaptools) #library(afrilearnr) 5.2 Quick interactive maps with mapview Mapview package allows quickly and easily create interactive maps of spatial data. Therefore, it is useful when we want to quickly explore the data visually without excessive care about the quality of the presentation. However, if we need static maps or interactive maps which are more elaborate we might want to consider other options such as tmap package which will be presented later in this chapter. The typical spatial objects types supported by mapview package are: sf raster sp To create the most basic map with the boundaries of African countries we call mapview() function # data(africountries) # mapview(africountries) This map has a number of functions: a layer button to switch between five different layers scale bar zoom butttons data name in the top right corner We can easily fill an interactive map with the colours based on one of the columns. Here we use population column to colours our map. Importantly, when we hoover over specific country the population data for a given country is showed. #mapview(africountries, zcol = (&quot;pop_est&quot;)) Similarly, we can control for other features such as line width (lwd), colour of polygons (col.regions). Another important feature that we might want to control is the underlying map which we set with ‘map.types’ argument. The available background maps can be viewed here. #mapview(africountries, color = &quot;red&quot;, # lwd = 1.5, col.regions = &quot;white&quot;, map.types = &quot;Esri.WorldShadedRelief&quot;) Further, mapview allows us to easily build up many layers within a single map. Here, we firstly include countries and then add location of airports. Further a useful option is layer.name which allows us to control the naming of different layers of the map. The specific layers can be controlled and adjusted as showed in the example. In partucular, we set the colour of countries polygons according to the population size. It is possible to use layer button to hide and unhide layers of the map. # # simple map with two layers # # data(afriairports) # mapview(list(africountries,afriairports), layer.name = c(&quot;Countries&quot;, &quot;Airports&quot;)) # # #map with advanced layers options # mapview(africountries, zcol = &quot;pop_est&quot;, layer.name = &quot;Population&quot;) + # mapview(afriairports, layer.name = &quot;Airports location&quot; ) The link to full documentation is available in Further resources section. 5.2.1 Exercises div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.2.1: Create a map with two layers: countries and capitals. Fill the country polygons according to income group. Explore the layers button to hide and unhide some of them. 5.3 Static maps with tmap In this section we explore the potential of tmap in creating static maps, which is a flexible, yet user-friendly package. Its syntax is similar to ggplot2 (plot-making package), where additional features of the map are simply build up on top of the basic structure. Before we plot the first maps we need to create a dataset called africa and activate static map viewing mode. africa &lt;- ne_countries(continent = &#39;africa&#39;, scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) tmap_mode(&quot;plot&quot;) #activates static map viewing mode Next, we create an empty contour map of the continent, where tm_shape() function serves as a basic component containing the shape object i.e. our spatial dataset. On top of this basic element we can then add more layers using + operator. The advantage of tmap package is that it offers a large variety layers and these are named relatively intuitively to make the search and use easier. For example, we will now use layer called tm_borders() which defines the borders of the polygons. tm_shape(africa)+ tm_borders() Further, we create an empty, borderless map using tm_fill() which defines the fill of the polygons. tm_shape(africa)+ tm_fill() Intuitively to create a map with both layers, we need to include tm_fill() and tm_borders() simultaneously. Alternatively, tm_polygons() function allows us to achieve exactly the same result more efficiently. It draws the polygons borders and fills them. tm_shape(africa)+ tm_borders()+ tm_fill() tm_shape(africa)+ tm_polygons() We can further develop our map by adjusting different features of the map such as colour and transparency of the map, width and types of the border lines etc. The extra parameters for changing the plot elements can be found here. tm_shape(africa)+ tm_polygons(col = &quot;green&quot;, lty = &quot;dotted&quot;, alpha = 0.3) As we already know a basic structure required to build a static map, we can proceed to a more advanced (and useful) example, where we fill the polygons using data on last census and adding relevant title to the legend. In this case, we also use legend.formatoption to format the legend numbers to be treated as years. # tm_shape(africa)+ # tm_polygons(col = &quot;lastcensus&quot;, title = &quot;Year of last census&quot;, legend.format = list(format=&quot;s&quot;)) Further, we can build on the previous map by adding labels for country names with tm_text function. In a similar manner a variety of different layers can be added. # tm_shape(africa)+ # tm_polygons(col = &quot;lastcensus&quot;, title = &quot;Year of last census&quot;, legend.format = list(format=&quot;s&quot;))+ # tm_text(&quot;admin&quot;, size = 0.52, fontface = &quot;bold&quot;, auto.placement = TRUE) Another useful function in tmap is the adjustment of the intervals in the legend, in case the default scale does not provide enough variety. For example, plotting the population of African countries on the map using default intervals (stemming from the data) is not very informative due to to much clustering of information. Instead, we might want to use breaks argument to set them up manually to provide more differentiation visually. For clarity, I set up the customised breaks outside of the map-making function. Alternatively, we can control number of so-called bins (groups) into which the Population is divided, by setting n argument to a desired number of bins inside the tm_polygons function. #default settings # tm_shape(africa)+ # tm_polygons(col = &quot;pop_est&quot;, title = &quot;Population&quot;) #set up breaks manually # custom_breaks = c(10, 40, 80, 120, 160, 200, 240, 280, 320) * 100000 # tm_shape(africa)+ # tm_polygons(col = &quot;pop_est&quot;, title = &quot;Population&quot;, breaks = custom_breaks) #set up a number of bins # tm_shape(africa)+ # tm_polygons(col = &quot;pop_est&quot;, title = &quot;Population&quot;, n = 15) So far, we used continuous variables to fill the polygons but it is also possible to use categorical variables for this purpose. In the example below income_grp variable is a categorical variable with income level. It allows for visual grouping of countries in the same category. The names of the categories in the legend were adjusted using labels argument. In the similar manner we can show the airports of Africa according to their size. # tm_shape(africa)+ # tm_polygons(col = &quot;income_grp&quot;, title = &quot;Income levels&quot;, alpha = 0.6, labels = c(&quot;High&quot;, &quot;Upper middle&quot;, &quot;Lower middle&quot;, &quot;Lower&quot;)) # # data(afriairports) # tm_shape(africontinent)+ # tm_polygons(col = &quot;lightgrey&quot;)+ # tm_shape(afriairports)+ # tm_dots(col = &quot;type&quot;, shape = 21, size = 0.2, title = &quot;Airport size&quot;, labels = c(&quot;Large&quot;, &quot;Medium&quot;, &quot;Small&quot;), palette=c(large_airport=&#39;red&#39;, medium_airport=&#39;yellow&#39;, small_airport=&#39;blue&#39;)) It is important to bear in mind that same information can be displayed on the map in many different ways. For example, we can make use of ‘tm_bubbles’ to create so called bubbles which size is linked to the population of each country while their colour related to the income group. # tm_shape(africa)+ # tm_polygons(col = &quot;lightblue&quot;)+ # tm_bubbles(size = &quot;pop_est&quot;, col = &quot;income_grp&quot;, title.col = &quot;Income level&quot;, title.size = &quot;Population&quot;) 5.3.1 Colour setting and colour pallete An important aspect of the maps, as in every visual representation, are the colours. In tmap we can change the default colours using palette argument. In the example below, we used palette called Set1 and plasma and there are many other options to choose from. To view them, we run tmaptools::palette_explorer() which will open a new window with a wide range of palettes. Sliders on the left hand side allow selecting a number of colours. # tm_shape(africa)+ # tm_polygons(col = &quot;lastcensus&quot;, title = &quot;Year of last census&quot;, palette = &quot;Set1&quot;, legend.format = list(format=&quot;s&quot;)) # # tm_shape(africa)+ # tm_polygons(col = &quot;lastcensus&quot;, title = &quot;Year of last census&quot;, palette = &quot;plasma&quot;, legend.format = list(format=&quot;s&quot;)) Alternatively an overall style of a single map can be easily changed using tm_style function. However, it might also be useful to change the style in all the maps in the document. This can be achieved with setting the style globally with tmap_style(\"nameofthestyle\"). The default style is called “white”, hence to restore a default style setting use tmap_style(\"white\"). # tm_style(&quot;classic&quot;)+ # tm_shape(africa)+ # tm_polygons()+ # tm_bubbles(size = &quot;pop_est&quot;, col = &quot;income_grp&quot;, title.col = &quot;Income level&quot;, # title.size = &quot;Population&quot;, labels = c(&quot;High&quot;, &quot;Upper middle&quot;, &quot;Lower middle&quot;, &quot;Lower&quot;)) # # tm_style(&quot;beaver&quot;)+ # tm_shape(africa)+ # tm_polygons()+ # tm_bubbles(size = &quot;pop_est&quot;, col = &quot;income_grp&quot;, title.col = &quot;Income level&quot;, # title.size = &quot;Population&quot;, labels = c(&quot;High&quot;, &quot;Upper middle&quot;, &quot;Lower middle&quot;, &quot;Lower&quot;)) # # tm_style(&quot;albatross&quot;)+ # tm_shape(africa)+ # tm_polygons()+ # tm_bubbles(size = &quot;pop_est&quot;, col = &quot;income_grp&quot;, title.col = &quot;Income level&quot;, # title.size = &quot;Population&quot;, labels = c(&quot;High&quot;, &quot;Upper middle&quot;, &quot;Lower middle&quot;, &quot;Lower&quot;)) 5.3.2 Visualising different datasets in one map tmap not only allows us to add extra layers to a single map by building on a basic structure, but it also enables us to join two separate datasets in a single map. We first create an object called countries which is a map with African countries: # #read in data # data(africountries) # #create an object # countries = tm_shape(africountries)+ # tm_polygons(col = &quot;lightblue&quot;, alpha = 0.3) # #view object called &quot;countries&quot; # countries Then we use it as an argument to merge it with a map containing the location of capitals. # #read in data with capitals # data(africapitals) # #merge two maps # countries+ # tm_shape(africapitals)+ #uses dataset with capitals # tm_dots(col = &quot;red&quot;, size = 0.15)+ #adds dots on the map # tm_layout(title = &quot;Capital cities of Africa&quot; , title.position = c(&quot;right&quot;, &quot;top&quot;), title.size = 1) #add and adjust map title 5.3.3 Exercises The solution to the exercises are provided at the end of the chapter. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.3.1: Plot a yellow map of Africa with transparency of 0.4 and solid line borders of width 3. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.3.2: Plot a lightblue map of Africa with dotted, non-transparent, red borders. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.3.3: Plot a map that has polygons filled with gross domestic product, black borders, legend titled “GDP” and customised breaks at 0, 20000, 30000, 40000, 50000, 100000, 200000, 300000, 500000. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.3.4: Create a map with continent contour in light green colour. Then add african highways by using afrihighway dataset. Finally, include a title on the bottom of the map. 5.4 Interactive maps with tmap tmappackage offers versatility not only for creating static maps, as we have seen above, but it also allows for making customised interactive maps conveniently by simply changing the mode of operation from static to dynamic using plot or view, respectively in tmap_mode() function. After the activation of an interactive mode all the maps produced with tmap will be interactive. Therefore, we are able to create all the maps that we have produced so far in an interactive version. # #sets interactive mode # tmap_mode(&quot;view&quot;) # # tm_shape(africa)+ # tm_borders()+ # tm_shape(africapitals)+ # tm_dots(col = &quot;white&quot;, border.col = &quot;blue&quot;, size = 0.1)+ #capital dots settings # tm_text(&quot;capitalname&quot;)+ #adds capital names # tm_shape(afrihighway)+ # tm_lines(col = &quot;red&quot;, lwd = 2, alpha = 0.7) #highway lines setting # Regardless of the mode, the creation of maps using tmap package is easy and convenient. The additional feature in the interactive mode is the choice of the background map. This can be set up using function tm_basemap. Available base maps can be accessed using leaflet::providers. They can also be previewed here. In the example below, we use a topographic map of Africa. # tm_basemap(&quot;OpenTopoMap&quot;)+ # tm_shape(africa)+ # tm_borders()+ # tm_shape(africapitals)+ # tm_dots(col = &quot;black&quot;)+ #capital dots settings # tm_shape(afrihighway)+ # tm_lines(col = &quot;red&quot;, lwd = 2, alpha = 0.7) #highway lines setting 5.4.1 Visualising subsets of data Let’s assume that we are only interested in the subset of our data for example a specific country or the location of large airports only. We can achieve it using dplyr package. # tmap_mode(&quot;view&quot;) # data(afriairports) # # #take a subset of data # large = afriairports %&gt;% filter(type==&quot;large_airport&quot;) # # #plot the subset # tm_shape(africa)+ # tm_borders()+ # tm_shape(large)+ # tm_dots( col = &quot;red&quot;) 5.4.2 Exercises div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.4.1: Create an interactive map uses watercolour theme, the highways are blue and dots denoting capitals are white with black borders. Finally, add capitalnames. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 5.4.2: Create an interactive map of African countries which have population smaller than 10 million. Fill the polygons with the population size. 5.5 Further resources tmap documentation Mapview documentation 5.6 Exercise solutions Exercise 5.2.1 #mapview(africountries, zcol = &quot;income_grp&quot;) + mapview(africapitals) Exercise 5.3.1 # tm_shape(africa)+ # tm_polygons(col = &quot;yellow&quot;, lwd = 3, lty = &quot;solid&quot;, alpha = 0.4) Exercise 5.3.2 # tm_shape(africa)+ # tm_fill(col = &quot;lightblue&quot;)+ # tm_borders(col = &quot;red&quot;, lty = &quot;dotted&quot;, alpha = 1) Exercise 5.3.3 # custom_breaks = c(0, 2, 3, 4, 5, 10,20, 30, 50) * 10000 # tm_shape(africa)+ # tm_polygons(col = &quot;gdp_md_est&quot;, title = &quot;GDP&quot;, breaks = custom_breaks) Exercise 5.3.4 # map_contour = tm_shape(africa)+ # tm_fill(col = &quot;lightgreen&quot;) # data(afrihighway) # map_contour + # tm_shape(afrihighway)+ # tm_lines()+ # tm_layout(title = &quot;Highways in Africa&quot;, title.position = c(&quot;center&quot;, &quot;bottom&quot;)) Exercise 5.4.1 # tmap_mode(&quot;view&quot;) # # # tm_basemap(&quot;Stamen.Watercolor&quot;)+ # tm_shape(africa)+ # tm_borders()+ # tm_shape(africapitals)+ # tm_dots(col = &quot;white&quot;, border.col = &quot;black&quot;)+ #capital dots settings # tm_text(&quot;capitalname&quot;, size = 1.2)+ # tm_shape(afrihighway)+ # tm_lines(col = &quot;blue&quot;, lwd = 3) #highway lines setting Exercise 5.4.2 # tmap_mode(&quot;view&quot;) # data(africountries) # # #take a subset of data # small = africountries %&gt;% filter(pop_est &lt; 10000000) # # tm_shape(small)+ # tm_polygons(col = &quot;pop_est&quot;) "],["shiny.html", "Chapter 6 Shiny interactive map applications", " Chapter 6 Shiny interactive map applications Use of shiny package "],["data-sources.html", "Chapter 7 Sources of data", " Chapter 7 Sources of data See also https://rspatialdata.github.io/ R packages, Web APIs, OpenStreetMap intro, HDX 7.0.1 HDX "],["joining.html", "Chapter 8 Join non-spatial data onto spatial", " Chapter 8 Join non-spatial data onto spatial This chapter demonstrated how to join non-spatial data from different sources into spatial "],["raster.html", "Chapter 9 Raster manipulation", " Chapter 9 Raster manipulation e.g. summarising data by areas "],["openstreetmap.html", "Chapter 10 OpenStreetMap data", " Chapter 10 OpenStreetMap data what they are and how to use them? "],["data-editing.html", "Chapter 11 Creating and editing spatial data 11.1 Create a vector file from scratch", " Chapter 11 Creating and editing spatial data How to create and edit spatial data with examples 11.1 Create a vector file from scratch "],["visualising2.html", "Chapter 12 Visualising spatial data part 2", " Chapter 12 Visualising spatial data part 2 More advanced techniques of visualising of spatial data "],["case-study1.html", "Chapter 13 Case study 1 13.1 Health facility locations (probably)", " Chapter 13 Case study 1 13.1 Health facility locations (probably) "],["case-study2.html", "Chapter 14 Case study 2", " Chapter 14 Case study 2 To be decided "],["references.html", "References", " References Hijmans, R., J.(2020) Spatial Data Science. https://rspatial.org/intr/ "],["template.html", "Chapter 15 Template chapter 15.1 Linking section 1 15.2 Overall goal of the chapter 15.3 Episode 1 (topic 1) 15.4 Episode 2 (topic 2) 15.5 Episode 3 (topic 3) 15.6 Further resources 15.7 Wrap up 15.8 Exercise solutions 15.9 Feedback 15.10 Putting into practice", " Chapter 15 Template chapter 15.1 Linking section 1 This initial section of each lesson (chapter) should build a link with the previous section of the book by providing a recap of what has been previously done. It will help with locating each chapter within the context of the entire book. 15.2 Overall goal of the chapter In this section we will describe what the overall aim of this chapter and target audience including: What they are already expected to know (their previous knowledge) What are the goals of the audience div.green { background-color:#e3ffd9; border-radius: 5px; padding: 20px;} Learning objectives What you will learn What you will be able to do at the end of this chapter What you will not learn &amp; what to read instead Where to go from here List of episodes List of ‘episodes’ in this chapter that will help achieve set goal with their short description and an explanation of links between them. Episode 1 Episode 2 Episode 3 15.3 Episode 1 (topic 1) Each episode developed within the chapter should contain a narrative to give a bit of a context and again demonstrate the target audience (if needed). Beyond it should provide episode-specific learning objectives and examples, which are to be intertwined with so-called self-check exercises which will allow the reader to assess his comprehension of the topic so far. div.purple { background-color:#e9d0f7; border-radius: 5px; padding: 20px;} Exercise 1: The exercise description to be in the coloured box &amp; the small, control exercises should be placed at the end of the subsection. 15.4 Episode 2 (topic 2) div.yellow { background-color:#fff5e6; border-radius: 5px; padding: 20px;} Shortcut: Shortcuts to be in a yellow box. 15.5 Episode 3 (topic 3) div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Hints: Hints to be in a blue box. 15.6 Further resources In this section we provide links to additional websites and sources that are useful in a given topic or package in the following way: R website Documentation pages 15.7 Wrap up This closing section should show the reader what has been done in this chapter and how it links with the topics provided in the next chapter by a brief introduction to next topic. 15.8 Exercise solutions Exercise 1 #code to exercise 1 only, results hidden Exercise 2 #code to exercise 2 only, results hidden 15.9 Feedback Feedback section aims at learning what was useful to the reader (learner) and what can be improved. It gives the reader an opportunity to reflect on what he/she learned and evaluate the book in this this context. 15.10 Putting into practice This final section is aimed at consolidating the knowledge and skills learned throughout the whole chapter, where the reader can put them into practice in a more complex working example with a new context. "]]
